
Loading of the data in preparation for model runs

   # Calculate/check the Analysis area, Study area and Background file area

   # Load the Background file, clip it to the size of the Study area
   #   make a list of all non-(near)-zero cell coords, locations and values

   # Load the Origin data, filter values to the Study area, calculate age-band populations

   # Load the Destination data, filter values to the Study area, calculate age-band populations

   # Load the Timeseries data

   # Create LocationIndex arrays:
   #    used to quickly find all locations (origins or destinations) within a bounding box
   #    Origin locationIndex is used for the model WAD candidate selection (if study area > 120km wide/high)
   #    Origin and Destination locationIndex is used for Local Dispersal

Description of the algorithm implemented by the modelRun class (work in progress)

   # make a copy of the origin total pop array for this ageband

   # loop through each destination collection

   #     loop through each destination row in the collection

   #         grab the time profile for this collection

   #            (if changed) find the on site / in travel % for the specified time (from timeseries)

   #         grab the population for the specified ageband
   #            (calculated on load, using the total pop and ageband percentages)

   #             calculate for destination required OnSite Pop / InTravel Pop


   #             Major Flows first
   #               if any, loop through each MF for this destination
   #                   percentage of onSite/inTravel required -> numbers to remove
   #                   find list of origins providing these values, and pop count
   #                   add origins to list of MF origins affected by this dest
   #                      for each origin in the list
   #                         calc ratio of origin pop to pop total
   #                         subtract proportion from origins
   #                         subtract from required pop onSite/inTravel

   #             loop through each WAD pair (note nearest always first)
   #                 add empty origin pop count and origin list to each WAD list

   #             loop through each origin
   #                 ignore if in list of MF origins affected by this dest
   #                 calculate distance to current destination
   #                   work through WADs stepping through smallest to largest radius
   #                   add index to origin list for smallest matching WAD 
   #                   update (origins) pop total for corresponding matching WAD

   #             loop through each WAD pair again, smallest to largest radius
   #                 for each one with total origin pop > 0
   #                    for each origin in the list
   #                       calc ratio of origin pop to total orig pop
   #                       remove proportion from origins
   #                       remove from WAD pop total
   #                         pass pop total to next WAD (or pull from next)
   #                         pass origins to next WAD (or pull from next)



inTravel grid creation:

   # for each dest array item inTravel value
   #    for each wad (rad:pc)
   #       allocate non-zero background cells (within radius) and total bg amount into each wad
   #
   #    for each wad (pc)
   #       -> amount within this radius
   #            for each contained background cell
   #                add to same location in new grid:
   #                    dest pop * wad pc * background weighting /  total weighting


Local Dispersion:

After modelRun we have:
- List of all Origins immobile: { E, N, pop, LDparam }
- List of all Origins not distributed: { E, N, pop, LDparam }
- List of all Destinations onSite { E, N, pop, LDparam }
- LDparam is assumed to be the Cressman function parameter
- [ Destination inTravel ignored as already dealt with using WAD ]

   # for each { E, N, pop, LDparam } (separately for each class of data)
   
   #    find any other locations of the same data class also within the LDradius
   #       calculate AVI (Inter Centroid Distance)
   #          if none -> LDradius, if 1 -> distance, otherwise average distance
   
   #    get list of candidate results grid cells with centroid within AVI (affected)
   
   #    for each affected cell run Cressman:
   #       calculate cell weight based on centroid distance from data E,N
   #       add to results grid: data population value * cell weight / total weight (or scale to 1 above and mult)

Saving CSV data: 

# The 4 sources need to be dealt with separately, as the results table has them listed in separate columns:

x	y	OriginLD	OriginImmob	Intravel	OnSite	Total
320000	110000	0	0	0	0	0
320000	110200	0	0	0	0	0
320000	110400	0	0	0	0	0
...

   # loop through each X, Y, grab the value in each of the 4 grids
   # Sum them into Total, if Total > 0 output a csv line to the results file


# alternative inTravel grid (not successful)

for each destination

  loop through BB of largest wad
    grab X,Y of BG grid, bg_val
      if bg_val > 0
        dist_sq = X,Y to dest(x,y)
	loop through wads
	  add (x,y) to wad list, increment wad total

  loop though wads
    dest bg total for wad
      for each x,y in list for wad
        inTrav(x,y) += inTrav * bg[x,y] / bg_total
